Return-path: <fw-yama-hd@pomail01.silk.ntt-tx.co.jp>
Received: from zssg-mailmd101.ddreams.local
 (zssg-mailmd101.ddreams.local [10.160.123.96]) by zssg-mailms320.ddreams.local
 (NTT DoCoMo Mail System) with ESMTP id <0PTL00UJO02Q8Y40@NTTDoCoMo.co.jp> for
 yamashita.hideyuki@ntt-tx.co.jp; Mon, 24 Jun 2019 11:25:38 +0900 (JST)
Original-recipient: rfc822;yamashita.hideyuki@ntt-tx.co.jp
Received: from smtp_saver-daemon.zssg-mailmd101.ddreams.local by
 zssg-mailmd101.ddreams.local (dDREAMS) id <0PTL01D0402QJP00@dDREAMS> for
 yamashita.hideyuki@ntt-tx.co.jp (ORCPT yamashita.hideyuki@ntt-tx.co.jp); Mon,
 24 Jun 2019 11:25:38 +0900 (JST)
Received: from zssg-mailmf102.ddreams.local
 (zssg-mailmf900.ddreams.local [10.160.172.84]) by zssg-mailmd101.ddreams.local
 (dDREAMS) with ESMTP id <0PTL016R802QW030@dDREAMS> for
 yamashita.hideyuki@ntt-tx.co.jp (ORCPT yamashita.hideyuki@ntt-tx.co.jp); Mon,
 24 Jun 2019 11:25:38 +0900 (JST)
Received: from zssg-mailmf102.ddreams.local (unknown [127.0.0.1])
	by zssg-mailmf102.ddreams.local (Postfix) with ESMTP id 2F2617E6032	for
 <yamashita.hideyuki@ntt-tx.co.jp>; Mon, 24 Jun 2019 11:25:38 +0900 (JST)
Received: from zssg-mailmf102.ddreams.local (unknown [127.0.0.1])
	by IMSVA (Postfix) with ESMTP id 2DE308E6054	for
 <yamashita.hideyuki@ntt-tx.co.jp>; Mon, 24 Jun 2019 11:25:38 +0900 (JST)
Received: from localhost (unknown [127.0.0.1])	by IMSVA (Postfix)
 with SMTP id 22CFB8E6050	for <yamashita.hideyuki@ntt-tx.co.jp>; Mon,
 24 Jun 2019 11:25:38 +0900 (JST)
X-IMSS-HAND-OFF-DIRECTIVE: localhost:10026
Received: from zssg-mailmf102.ddreams.local (unknown [127.0.0.1])
	by IMSVA (Postfix) with ESMTP id 060BC8E6050	for
 <yamashita.hideyuki@ntt-tx.co.jp>; Mon, 24 Jun 2019 11:25:37 +0900 (JST)
Received: from pomail01.silk.ntt-tx.co.jp (unknown [10.160.183.139])
	by zssg-mailmf102.ddreams.local (Postfix)
 with ESMTPS	for <yamashita.hideyuki@ntt-tx.co.jp>; Mon,
 24 Jun 2019 11:25:36 +0900 (JST)
Received: from pomail01.silk.ntt-tx.co.jp (localhost [127.0.0.1])
	by pomail01.silk.ntt-tx.co.jp (unknown) with ESMTP id x5O2Pa0U013604;	Mon,
 24 Jun 2019 11:25:36 +0900
Received: (from yama-hd@localhost)	by pomail01.silk.ntt-tx.co.jp (unknown)
 id x5O2PaSu013603;	Mon, 24 Jun 2019 11:25:36 +0900
X-Authentication-warning: pomail01.silk.ntt-tx.co.jp: yama-hd set sender to
 fw-yama-hd@pomail01.silk.ntt-tx.co.jp using -f
Received: from imss04.silk.ntt-tx.co.jp
 (imss04.silk.ntt-tx.co.jp [10.107.0.39])	by pomail01.silk.ntt-tx.co.jp
 (unknown) with ESMTP id x5O2Pab1013600	for unknown; Mon,
 24 Jun 2019 11:25:36 +0900
Received: from imss04.silk.ntt-tx.co.jp (localhost [127.0.0.1])
 by imss04.silk.ntt-tx.co.jp (unknown) with ESMTP id x5O2PaZ8006032 for
 unknown; Mon, 24 Jun 2019 11:25:36 +0900
Received: from ml01.silk.ntt-tx.co.jp (ml01.silk.ntt-tx.co.jp [10.107.0.230])
 by imss04.silk.ntt-tx.co.jp (unknown) with ESMTP id x5O2PaJM006029; Mon,
 24 Jun 2019 11:25:36 +0900
Received: from ml01.silk.ntt-tx.co.jp (localhost [127.0.0.1])
	by ml01.silk.ntt-tx.co.jp (unknown) with ESMTP id x5O2PaHF016473;	Mon,
 24 Jun 2019 11:25:36 +0900
Received: from imss02.silk.ntt-tx.co.jp
 (imss02.silk.ntt-tx.co.jp [10.107.0.127])	by ml01.silk.ntt-tx.co.jp (unknown)
 with ESMTP id x5O2PauS016469	for unknown; Mon, 24 Jun 2019 11:25:36 +0900
Received: from imss02.silk.ntt-tx.co.jp (localhost [127.0.0.1])
 by imss02.silk.ntt-tx.co.jp (unknown) with ESMTP id x5O2PZ7M006583 for
 unknown; Mon, 24 Jun 2019 11:25:35 +0900
Received: from mail01.ics.ntt-tx.co.jp (mail01.ics.ntt-tx.co.jp [10.254.2.67])
 by imss02.silk.ntt-tx.co.jp (unknown) with ESMTP id x5O2PZut006580 for
 unknown; Mon, 24 Jun 2019 11:25:35 +0900
Received: from dpdk.org (dpdk.org [92.243.14.124])	by mail01.ics.ntt-tx.co.jp
 (unknown) with SMTP id x5O2PTFu003872	for unknown; Mon,
 24 Jun 2019 11:25:34 +0900
Received: from [92.243.14.124] (localhost [127.0.0.1])	by dpdk.org (Postfix)
 with ESMTP id BACE21BF6E;	Mon, 24 Jun 2019 04:25:28 +0200 (CEST)
Received: from mail-pl1-f193.google.com
 (mail-pl1-f193.google.com [209.85.214.193]) by dpdk.org (Postfix)
 with ESMTP id 810911BF6B for <spp@dpdk.org>; Mon,
 24 Jun 2019 04:25:26 +0200 (CEST)
Received: by mail-pl1-f193.google.com with SMTP id ay6so5958034plb.9 for
 <spp@dpdk.org>; Sun, 23 Jun 2019 19:25:26 -0700 (PDT)
Received: from localhost.localdomain ([192.47.164.146])
 by smtp.gmail.com with ESMTPSA id a3sm9927461pje.3.2019.06.23.19.25.24
 (version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128); Sun,
 23 Jun 2019 19:25:25 -0700 (PDT)
Date: Mon, 24 Jun 2019 11:24:57 +0900
From: yasufum.o@gmail.com
Subject: [spp 04365] [spp] [PATCH 04/11] shared/sec: rename struct
 classified_data
Sender: spp <spp-bounces@dpdk.org>
To: spp@dpdk.org, ferruh.yigit@intel.com, yasufum.o@gmail.com
Message-id: <20190624022504.18752-5-yasufum.o@gmail.com>
In-reply-to: <20190624022504.18752-1-yasufum.o@gmail.com>
References: <20190624022504.18752-1-yasufum.o@gmail.com>
X-ML-Name: unknown
X-Mail-Count: 04365
X-MLServer: unknown
X-ML-Info: mailing list service
X-Mailer: git-send-email 2.17.1
Authentication-results: mail01.ics.ntt-tx.co.jp; spf=pass
 smtp.mailfrom=spp-bounces@dpdk.org
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20161025;
 h=from:to:subject:date:message-id:in-reply-to:references;
 bh=f1zFhm0li3K3WAXPHGSWgwlsP9sdjVn2AJgFLtNSum8=;
 b=Z/3fRNBE6HpOg+BcCtdRlTcvga2Rh6EyVg0JKoabEpf+FiGhNPPaf8RF4VA+ThKyns
 9CPWn+ise/H0DZMYr3MgInud21z34wuPnrZLPGJqvOGzzeOpW66KNNyP1/ZXu4vjpfI0
 m6mSPyAn7y5mJTmwdpw9AFO4LmYRKlrA51STlFKIAC1THGD887luBrPAuHRaTxtkEge0
 5cuwUBb4RWvA1KM5W0/RG/iOjegizmvaH+weKcfrgJualVkeAH9fnlTlauy3uWn4M0tC
 qCS4358mwe5F2QaIIkf3Mjnk0Qs7XXF/vu9uyTU5IeqfnJ8rqZW0oxrObqXEN7zl+kWY 4dXA==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=1e100.net;
 s=20161025; h=x-gm-message-state:from:to:subject:date:message-id:in-reply-to
 :references; bh=f1zFhm0li3K3WAXPHGSWgwlsP9sdjVn2AJgFLtNSum8=;
 b=iuCQ1QRaf+vH4CLCEpVpogtwsrHApAPuG1EFCYfA9Zm5EaXJq2i0efydMAsuUskJB8
 MXiAdWDSSVsE3pQs500M9rOcWTMnFZrtYP57X22swefKixB22frC+GCK0G4kGiRDwCD9
 qFfn7vfq3Izsz4wxZgV1RgCypMD9zjq8hFmcnGItenPgERJxSx+NcLySfCw/+e60FWyg
 e2/Dvp14aro5uo+BUnV3gnH6ZtuttOf/1azUMxb2zBMZEgq+wtOnQcQv7s/ZVzh/jaCd
 z6BktdSz3klOS87E2jpo1yVLoMNslR9+6bkfr1PvoQf3nW4ADHMBnFKHg1EWLkVeuxK9 Foww==
X-Gm-Message-State: APjAAAWLp85Qz+HiE8SkVYDynJhg03Vx/933jOQXKs4C1bAm15bZAPyK
 /iokwHwEDhk/bPrnWx7WHkHV9W9T
X-Google-Smtp-Source:
 APXvYqzwgF05d5sGtgy9IahsWOgkK26Zn+DV1dhN2EtKpEq7k/125liyH8h20LUW7m4VIzW9rzXGHw==
X-Received: by 2002:a17:902:2aab:: with SMTP id
 j40mr101360989plb.76.1561343125516; Sun, 23 Jun 2019 19:25:25 -0700 (PDT)
X-BeenThere: spp@dpdk.org
X-Mailman-Version: 2.1.15
List-Id: Soft Patch Panel <spp.dpdk.org>
List-Unsubscribe: <https://mails.dpdk.org/options/spp>,
 <mailto:spp-request@dpdk.org?subject=unsubscribe>
List-Archive: <http://mails.dpdk.org/archives/spp/>
List-Post: <mailto:spp@dpdk.org>
List-Help: <mailto:spp-request@dpdk.org?subject=help>
List-Subscribe: <https://mails.dpdk.org/listinfo/spp>,
 <mailto:spp-request@dpdk.org?subject=subscribe>
X-TM-AS-MML: No
Precedence: bulk
Lines: 243
X-TM-AS-GCONF: 00
X-MD-STAMP: ON

From: Yasufumi Ogawa <yasufum.o@gmail.com>

This update is to rename struct `classified_data` to `cls_port_info`
because it is a set of attributes of a port and not classified data
actually.

Signed-off-by: Yasufumi Ogawa <yasufum.o@gmail.com>
---
 src/shared/secondary/spp_worker_th/vf_deps.h | 13 +++--
 src/vf/classifier_mac.c                      | 50 ++++++++++----------
 2 files changed, 31 insertions(+), 32 deletions(-)

diff --git a/src/shared/secondary/spp_worker_th/vf_deps.h b/src/shared/secondary/spp_worker_th/vf_deps.h
index 3e8fc01..8085357 100644
--- a/src/shared/secondary/spp_worker_th/vf_deps.h
+++ b/src/shared/secondary/spp_worker_th/vf_deps.h
@@ -20,14 +20,13 @@ struct mac_classifier {
 	int default_cls_idx;  /* Default index for classification. */
 };
 
-/* classified data (destination port, target packets, etc) */
-/* TODO(yasufum) rename `classified_data`. */
-/* TODO(yasufum) confirm what `iface_no_global` does mean? */
-struct classified_data {
+/* Set of attirbutes of port for classification.  */
+/* TODO(yasufum) confirm what is `iface_no_global`. */
+struct cls_port_info {
 	enum port_type iface_type;
 	int iface_no;   /* Index of ports handled by classifier. */
 	int iface_no_global;  /* ID for interface generated by spp_vf */
-	uint16_t port;  /* Ethdev port ID. */
+	uint16_t ethdev_port_id;  /* Ethdev port ID. */
 	uint16_t nof_pkts;  /* Number of packets in pkts[]. */
 	struct rte_mbuf *pkts[MAX_PKT_BURST];  /* packets to be classified. */
 };
@@ -41,9 +40,9 @@ struct component_info {
 	struct mac_classifier *mac_classifications[NOF_VLAN];
 
 	int n_classified_data_tx;  /* number of transmission ports */
-	struct classified_data classified_data_rx;  /* RX handled by cls */
+	struct cls_port_info classified_data_rx;  /* RX handled by cls */
 	/* transmission ports handled by classifier */
-	struct classified_data classified_data_tx[RTE_MAX_ETHPORTS];
+	struct cls_port_info classified_data_tx[RTE_MAX_ETHPORTS];
 };
 
 /* free mac classification instance. */
diff --git a/src/vf/classifier_mac.c b/src/vf/classifier_mac.c
index cd0c546..b2388af 100644
--- a/src/vf/classifier_mac.c
+++ b/src/vf/classifier_mac.c
@@ -183,7 +183,7 @@ log_classification(
 		long clsd_idx,
 		struct rte_mbuf *pkt,
 		struct component_info *cmp_info,
-		struct classified_data *clsd_data,
+		struct cls_port_info *clsd_data,
 		const char *func_name,
 		int line_num)
 {
@@ -203,8 +203,7 @@ log_classification(
 	if (clsd_idx < 0)
 		snprintf(iface_str, sizeof(iface_str), "%ld", clsd_idx);
 	else
-		spp_format_port_string(
-				iface_str,
+		spp_format_port_string(iface_str,
 				clsd_data[clsd_idx].iface_type,
 				clsd_data[clsd_idx].iface_no_global);
 
@@ -231,7 +230,7 @@ log_entry(
 		uint16_t vid,
 		const char *mac_addr_str,
 		struct component_info *cmp_info,
-		struct classified_data *clsd_data,
+		struct cls_port_info *clsd_data,
 		const char *func_name,
 		int line_num)
 {
@@ -331,8 +330,8 @@ init_component_info(struct component_info *cmp_info,
 	struct mac_classifier *mac_cls;
 	struct ether_addr eth_addr;
 	char mac_addr_str[ETHER_ADDR_STR_BUF_SZ];
-	struct classified_data *clsd_data_rx = &cmp_info->classified_data_rx;
-	struct classified_data *clsd_data_tx = cmp_info->classified_data_tx;
+	struct cls_port_info *clsd_data_rx = &cmp_info->classified_data_rx;
+	struct cls_port_info *clsd_data_tx = cmp_info->classified_data_tx;
 	struct sppwk_port_info *tx_port = NULL;
 	uint16_t vid;
 
@@ -341,7 +340,7 @@ init_component_info(struct component_info *cmp_info,
 		clsd_data_rx->iface_type = UNDEF;
 		clsd_data_rx->iface_no = 0;
 		clsd_data_rx->iface_no_global = 0;
-		clsd_data_rx->port = 0;
+		clsd_data_rx->ethdev_port_id = 0;
 		clsd_data_rx->nof_pkts = 0;
 	} else {
 		clsd_data_rx->iface_type =
@@ -349,7 +348,7 @@ init_component_info(struct component_info *cmp_info,
 		clsd_data_rx->iface_no = 0;
 		clsd_data_rx->iface_no_global =
 			component_info->rx_ports[0]->iface_no;
-		clsd_data_rx->port =
+		clsd_data_rx->ethdev_port_id =
 			component_info->rx_ports[0]->ethdev_port_id;
 		clsd_data_rx->nof_pkts = 0;
 	}
@@ -362,10 +361,10 @@ init_component_info(struct component_info *cmp_info,
 		vid = tx_port->cls_attrs.vlantag.vid;
 
 		/* store ports information */
-		clsd_data_tx[i].iface_type      = tx_port->iface_type;
-		clsd_data_tx[i].iface_no        = i;
+		clsd_data_tx[i].iface_type = tx_port->iface_type;
+		clsd_data_tx[i].iface_no = i;
 		clsd_data_tx[i].iface_no_global = tx_port->iface_no;
-		clsd_data_tx[i].port            = tx_port->ethdev_port_id;
+		clsd_data_tx[i].ethdev_port_id = tx_port->ethdev_port_id;
 		clsd_data_tx[i].nof_pkts = 0;
 
 		if (tx_port->cls_attrs.mac_addr == 0)
@@ -450,13 +449,13 @@ uninit_component_info(struct component_info *cmp_info)
 
 /* transmit packet to one destination. */
 static inline void
-transmit_packet(struct classified_data *clsd_data)
+transmit_packet(struct cls_port_info *clsd_data)
 {
 	int i;
 	uint16_t n_tx;
 
 	/* transmit packets */
-	n_tx = spp_eth_tx_burst(clsd_data->port, 0,
+	n_tx = spp_eth_tx_burst(clsd_data->ethdev_port_id, 0,
 			clsd_data->pkts, clsd_data->nof_pkts);
 
 	/* free cannot transmit packets */
@@ -466,7 +465,7 @@ transmit_packet(struct classified_data *clsd_data)
 		RTE_LOG(DEBUG, SPP_CLASSIFIER_MAC,
 				"drop packets(tx). num=%hu, ethdev_port_id=%hu\n",
 				(uint16_t)(clsd_data->nof_pkts - n_tx),
-				clsd_data->port);
+				clsd_data->ethdev_port_id);
 	}
 
 	clsd_data->nof_pkts = 0;
@@ -477,7 +476,7 @@ static inline void
 transmit_all_packet(struct component_info *cmp_info)
 {
 	int i;
-	struct classified_data *clsd_data_tx = cmp_info->classified_data_tx;
+	struct cls_port_info *clsd_data_tx = cmp_info->classified_data_tx;
 
 	for (i = 0; i < cmp_info->n_classified_data_tx; i++) {
 		if (unlikely(clsd_data_tx[i].nof_pkts != 0)) {
@@ -494,7 +493,7 @@ transmit_all_packet(struct component_info *cmp_info)
 
 /* set mbuf pointer to tx buffer and transmit packet, if buffer is filled */
 static inline void
-push_packet(struct rte_mbuf *pkt, struct classified_data *clsd_data)
+push_packet(struct rte_mbuf *pkt, struct cls_port_info *clsd_data)
 {
 	clsd_data->pkts[clsd_data->nof_pkts++] = pkt;
 
@@ -507,7 +506,7 @@ push_packet(struct rte_mbuf *pkt, struct classified_data *clsd_data)
 				clsd_data->iface_type,
 				clsd_data->iface_no_global,
 				clsd_data->iface_no,
-				clsd_data->port,
+				clsd_data->ethdev_port_id,
 				clsd_data->nof_pkts);
 		transmit_packet(clsd_data);
 	}
@@ -533,7 +532,7 @@ get_general_default_classified_index(struct component_info *cmp_info)
 static inline void
 handle_l2multicast_packet(struct rte_mbuf *pkt,
 		struct component_info *cmp_info,
-		struct classified_data *clsd_data)
+		struct cls_port_info *clsd_data)
 {
 	int i;
 	struct mac_classifier *mac_cls;
@@ -640,7 +639,7 @@ select_classified_index(const struct rte_mbuf *pkt,
 static inline void
 classify_packet(struct rte_mbuf **rx_pkts, uint16_t n_rx,
 		struct component_info *cmp_info,
-		struct classified_data *clsd_data)
+		struct cls_port_info *clsd_data)
 {
 	int i;
 	long clsd_idx;
@@ -747,8 +746,8 @@ spp_classifier_mac_do(int id)
 	struct component_info *cmp_info = NULL;
 	struct rte_mbuf *rx_pkts[MAX_PKT_BURST];
 
-	struct classified_data *clsd_data_rx = NULL;
-	struct classified_data *clsd_data_tx = NULL;
+	struct cls_port_info *clsd_data_rx = NULL;
+	struct cls_port_info *clsd_data_tx = NULL;
 
 	uint64_t cur_tsc, prev_tsc = 0;
 	const uint64_t drain_tsc = (rte_get_tsc_hz() + US_PER_S - 1) /
@@ -792,7 +791,8 @@ spp_classifier_mac_do(int id)
 		return SPP_RET_OK;
 
 	/* retrieve packets */
-	n_rx = spp_eth_rx_burst(clsd_data_rx->port, 0, rx_pkts, MAX_PKT_BURST);
+	n_rx = spp_eth_rx_burst(clsd_data_rx->ethdev_port_id, 0, rx_pkts,
+			MAX_PKT_BURST);
 	if (unlikely(n_rx == 0))
 		return SPP_RET_OK;
 
@@ -812,7 +812,7 @@ spp_classifier_get_component_status(
 	int i, nof_tx, nof_rx = 0;  /* Num of RX and TX ports. */
 	struct management_info *mng_info;
 	struct component_info *cmp_info;
-	struct classified_data *clsd_data;
+	struct cls_port_info *clsd_data;
 	struct sppwk_port_idx rx_ports[RTE_MAX_ETHPORTS];
 	struct sppwk_port_idx tx_ports[RTE_MAX_ETHPORTS];
 
@@ -861,7 +861,7 @@ mac_classification_iterate_table(
 		uint16_t vid,
 		struct mac_classifier *mac_cls,
 		__rte_unused struct component_info *cmp_info,
-		struct classified_data *clsd_data)
+		struct cls_port_info *clsd_data)
 {
 	int ret;
 	const void *key;
@@ -918,7 +918,7 @@ spp_classifier_mac_iterate_table(
 	int i, n;
 	struct management_info *mng_info;
 	struct component_info *cmp_info;
-	struct classified_data *clsd_data;
+	struct cls_port_info *clsd_data;
 
 	for (i = 0; i < RTE_MAX_LCORE; i++) {
 		mng_info = g_mng_infos + i;
-- 
2.17.1



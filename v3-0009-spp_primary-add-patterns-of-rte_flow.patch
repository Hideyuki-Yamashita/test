From: Hideyuki Yamashita <yamashita.hideyuki@ntt-tx.co.jp>
Date: Mon, 11 Nov 2019 17:16:57 +0900
Subject: [PATCH v3 09/17] spp_primary: add patterns of rte_flow

To support rte_flow in SPP, this patch adds the following
patterns of rte_flow.
   - eth
   - vlan
Additional files should be added when new pattern should be
newly supported by SPP.

Signed-off-by: Hideyuki Yamashita <yamashita.hideyuki@ntt-tx.co.jp>
Signed-off-by: Naoki Takada <ntakada14@gmail.com>
---
 src/primary/flow/pattern/eth.c  | 63 +++++++++++++++++++++++++++++
 src/primary/flow/pattern/eth.h  | 13 ++++++
 src/primary/flow/pattern/vlan.c | 71 +++++++++++++++++++++++++++++++++
 src/primary/flow/pattern/vlan.h | 13 ++++++
 4 files changed, 160 insertions(+)
 create mode 100644 src/primary/flow/pattern/eth.c
 create mode 100644 src/primary/flow/pattern/eth.h
 create mode 100644 src/primary/flow/pattern/vlan.c
 create mode 100644 src/primary/flow/pattern/vlan.h

diff --git a/src/primary/flow/pattern/eth.c b/src/primary/flow/pattern/eth.c
new file mode 100644
index 0000000..d718b77
--- /dev/null
+++ b/src/primary/flow/pattern/eth.c
@@ -0,0 +1,63 @@
+/* SPDX-License-Identifier: BSD-3-Clause
+ * Copyright(c) 2019 Nippon Telegraph and Telephone Corporation
+ */
+
+#include <rte_flow.h>
+
+#include "primary/flow/flow.h"
+#include "primary/flow/common.h"
+#include "eth.h"
+
+/* Define item "eth" operations */
+struct flow_detail_ops eth_ops_list[] = {
+	{
+		.token = "src",
+		.offset = offsetof(struct rte_flow_item_eth, src),
+		.size = sizeof(struct rte_ether_addr),
+		.flg_value = 1,
+		.parse_detail = str_to_rte_ether_addr,
+	},
+	{
+		.token = "dst",
+		.offset = offsetof(struct rte_flow_item_eth, dst),
+		.size = sizeof(struct rte_ether_addr),
+		.flg_value = 1,
+		.parse_detail = str_to_rte_ether_addr,
+	},
+	{
+		.token = "type",
+		.offset = offsetof(struct rte_flow_item_eth, type),
+		.size = sizeof(rte_be16_t),
+		.flg_value = 1,
+		.parse_detail = str_to_rte_be16_t,
+	},
+	{
+		.token = NULL,
+	},
+};
+
+int
+append_item_eth_json(const void *element, int buf_size, char *pattern_str)
+{
+	const struct rte_flow_item_eth *eth = element;
+	char dst_mac[RTE_ETHER_ADDR_FMT_SIZE] = { 0 };
+	char src_mac[RTE_ETHER_ADDR_FMT_SIZE] = { 0 };
+	char tmp_str[128] = { 0 };
+
+	rte_ether_format_addr(dst_mac, RTE_ETHER_ADDR_FMT_SIZE, &eth->dst);
+	rte_ether_format_addr(src_mac, RTE_ETHER_ADDR_FMT_SIZE, &eth->src);
+
+	snprintf(tmp_str, 128,
+		"{\"dst\":\"%s\","
+		"\"src\":\"%s\","
+		"\"type\":\"0x%04x\"}",
+		dst_mac, src_mac, eth->type);
+
+	if ((int)strlen(pattern_str) + (int)strlen(tmp_str)
+		> buf_size)
+		return -1;
+
+	strncat(pattern_str, tmp_str, strlen(tmp_str));
+
+	return 0;
+}
diff --git a/src/primary/flow/pattern/eth.h b/src/primary/flow/pattern/eth.h
new file mode 100644
index 0000000..550813e
--- /dev/null
+++ b/src/primary/flow/pattern/eth.h
@@ -0,0 +1,13 @@
+/* SPDX-License-Identifier: BSD-3-Clause
+ * Copyright(c) 2019 Nippon Telegraph and Telephone Corporation
+ */
+
+#ifndef _PRIMARY_FLOW_PATTERN_ETH_H_
+#define _PRIMARY_FLOW_PATTERN_ETH_H_
+
+extern struct flow_detail_ops eth_ops_list[];
+
+int append_item_eth_json(const void *element, int buf_size,
+	char *pattern_str);
+
+#endif
diff --git a/src/primary/flow/pattern/vlan.c b/src/primary/flow/pattern/vlan.c
new file mode 100644
index 0000000..3ca8ebc
--- /dev/null
+++ b/src/primary/flow/pattern/vlan.c
@@ -0,0 +1,71 @@
+/* SPDX-License-Identifier: BSD-3-Clause
+ * Copyright(c) 2019 Nippon Telegraph and Telephone Corporation
+ */
+
+#include <rte_flow.h>
+
+#include "primary/flow/flow.h"
+#include "primary/flow/common.h"
+#include "vlan.h"
+
+/* Define item "vlan" operations */
+struct flow_detail_ops vlan_ops_list[] = {
+	{
+		.token = "tci",
+		.offset = offsetof(struct rte_flow_item_vlan, tci),
+		.size = sizeof(rte_be16_t),
+		.flg_value = 1,
+		.parse_detail = str_to_tci,
+	},
+	{
+		.token = "pcp",
+		.offset = offsetof(struct rte_flow_item_vlan, tci),
+		.size = sizeof(rte_be16_t),
+		.flg_value = 1,
+		.parse_detail = set_pcp_in_tci,
+	},
+	{
+		.token = "dei",
+		.offset = offsetof(struct rte_flow_item_vlan, tci),
+		.size = sizeof(rte_be16_t),
+		.flg_value = 1,
+		.parse_detail = set_dei_in_tci,
+	},
+	{
+		.token = "vid",
+		.offset = offsetof(struct rte_flow_item_vlan, tci),
+		.size = sizeof(rte_be16_t),
+		.flg_value = 1,
+		.parse_detail = set_vid_in_tci,
+	},
+	{
+		.token = "inner_type",
+		.offset = offsetof(struct rte_flow_item_vlan, inner_type),
+		.size = sizeof(rte_be16_t),
+		.flg_value = 1,
+		.parse_detail = str_to_rte_be16_t,
+	},
+	{
+		.token = NULL,
+	},
+};
+
+int
+append_item_vlan_json(const void *element, int buf_size, char *pattern_str)
+{
+	const struct rte_flow_item_vlan *vlan = element;
+	char tmp_str[128] = { 0 };
+
+	snprintf(tmp_str, 128,
+		"{\"tci\":\"0x%04x\","
+		"\"inner_type\":\"0x%04x\"}",
+		vlan->tci, vlan->inner_type);
+
+	if ((int)strlen(pattern_str) + (int)strlen(tmp_str)
+		> buf_size)
+		return -1;
+
+	strncat(pattern_str, tmp_str, strlen(tmp_str));
+
+	return 0;
+}
diff --git a/src/primary/flow/pattern/vlan.h b/src/primary/flow/pattern/vlan.h
new file mode 100644
index 0000000..50aef96
--- /dev/null
+++ b/src/primary/flow/pattern/vlan.h
@@ -0,0 +1,13 @@
+/* SPDX-License-Identifier: BSD-3-Clause
+ * Copyright(c) 2019 Nippon Telegraph and Telephone Corporation
+ */
+
+#ifndef _PRIMARY_FLOW_PATTERN_VLAN_H_
+#define _PRIMARY_FLOW_PATTERN_VLAN_H_
+
+extern struct flow_detail_ops vlan_ops_list[];
+
+int append_item_vlan_json(const void *element, int buf_size,
+	char *pattern_str);
+
+#endif
-- 
2.17.1

